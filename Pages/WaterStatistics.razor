@page "/waterstatistics"
@using ChartJs.Blazor.BarChart
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Enums
@using ChartJs.Blazor.Util
@using iotweb.Data
@inject IWaterService _waterService
<Chart Config="_config" @ref="_chart"></Chart>
@*<table class="table">
        <thead>
            <tr>
                <th>MessageId</th>
                <th>Time</th>
                <th>Temperature</th>
                <th>Turbidity</th>
                <th>PH</th>
                <th>Waterflow</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var water in waters)
            {
                <tr>
                    <td>@water.MessageId</td>
                    <td>@water.Time</td>
                    <td>@water.Temperature</td>
                    <td>@water.Turbidity</td>
                    <td>@water.PH</td>
                    <td>@water.Waterflow</td>
                </tr>
            }
        </tbody>
    </table>*@

@code {
    IList<WaterData> waters;
    private BarConfig _config;
    private Chart _chart;
    BarDataset<double> waterFlowDataset;
    BarDataset<double> pHDataSet;
    BarDataset<double> temDataSet;

    protected override void OnInitialized()
    {
        // Subscription to table record change events
        this._waterService.OnWaterChanged += this.WaterChanged;
        this.waters = this._waterService.GetCurrentWater();

        _config = new BarConfig
        {
            Options = new BarOptions
            {
                Responsive = true,
                Legend = new Legend
                {
                    Position = Position.Top
                },
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Biểu đồ lượng nước"
                }
            }
        };

        foreach (var water in waters)
        {
            _config.Data.Labels.Add(water.Time.ToString());
        }
        waterFlowDataset = new BarDataset<double>(waters.Select(x => double.Parse(x.Waterflow)).ToArray())
        {
            Label = "Lưu lượng",
            BackgroundColor = ColorUtil.ColorHexString(255, 177, 193),
            BorderColor = ColorUtil.ColorHexString(255, 177, 193),
            BorderWidth = 1
        };
        pHDataSet = new BarDataset<double>(waters.Select(x => double.Parse(x.PH)).ToArray())
        {
            Label = "pH",
            BackgroundColor = ColorUtil.ColorHexString(154, 208, 245),
            BorderColor = ColorUtil.ColorHexString(154, 208, 245),
            BorderWidth = 1
        };
        temDataSet = new BarDataset<double>(waters.Select(x => double.Parse(x.Temperature)).ToArray())
        {
            Label = "Nhiệt độ",
            BackgroundColor = ColorUtil.ColorHexString(255, 230, 170),
            BorderColor = ColorUtil.ColorHexString(255, 230, 170),
            BorderWidth = 1
        };

        _config.Data.Datasets.Add(waterFlowDataset);
        _config.Data.Datasets.Add(pHDataSet);
        _config.Data.Datasets.Add(temDataSet);
    }

    private void LoadChart()
    {
        _config.Data.Labels.Clear();
        ((IDataset<double>)_config.Data.Datasets[0]).Clear();
        ((IDataset<double>)_config.Data.Datasets[1]).Clear();
        ((IDataset<double>)_config.Data.Datasets[2]).Clear();
        foreach (var water in waters)
        {
            _config.Data.Labels.Add(water.Time.ToString());
            ((IDataset<double>)_config.Data.Datasets[0]).Add(double.Parse(water.Waterflow));
            ((IDataset<double>)_config.Data.Datasets[1]).Add(double.Parse(water.PH));
            ((IDataset<double>)_config.Data.Datasets[2]).Add(double.Parse(water.Temperature));
        }
        _chart.Update();
    }

    private async void WaterChanged(object sender, WaterChangeEventArgs args)
    {
        var recordToupdate = this.waters.FirstOrDefault(x => x.ID == args.NewWater.ID);

        if (recordToupdate == null)
        {
            this.waters.Add(args.NewWater);
        }
        else
        {
            recordToupdate.Waterflow = args.NewWater.Waterflow;
            recordToupdate.Temperature = args.NewWater.Temperature;
            recordToupdate.PH = args.NewWater.PH;
            recordToupdate.Turbidity = args.NewWater.Turbidity;

        }
        LoadChart();
        await InvokeAsync(() =>
        {
            base.StateHasChanged();
        });
    }

    public void Dispose()
    {
        this._waterService.OnWaterChanged -= this.WaterChanged;
    }
}
